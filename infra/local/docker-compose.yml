version: '3.8'

networks:
  testeVivoNetwork:
    external: true

services:
  db:
    image: gkazukionishi/vivo-mock-db
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'user'
      MYSQL_ROOT_PASSWORD: 'root'
    ports:
      - '49152:3306'
    expose:
      - '3306'
    networks:
      - testeVivoNetwork

  mock-api:
    image: gkazukionishi/metascale-api-mock-test
    restart: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/VivoTest
      - SPRING_DATASOURCE_PASSWORD=user
      - SPRING_DATASOURCE_USERNAME=user
    ports:
      - '3333:8080'
    expose:
      - '8080'
    depends_on:
      - db
    networks:
      - testeVivoNetwork

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    expose:
      - '2181'
    environment:
      - ZOO_ENABLE_AUTH=no
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - testeVivoNetwork

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9094:9094'
      - '9092:9092'
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=LISTENER_FROM_HOST://:9092,LISTENER_FROM_CONTAINER://kafka:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=LISTENER_FROM_HOST://localhost:9092,LISTENER_FROM_CONTAINER://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_FROM_HOST:PLAINTEXT,LISTENER_FROM_CONTAINER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LISTENER_FROM_CONTAINER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_CFG_NUM_PARTITIONS=1
    networks:
      - testeVivoNetwork
    depends_on:
      - zookeeper

  kafka-repl:
    image: 'bitnami/kafka:latest'
    ports:
      - '9095:9095'
      - '9093:9093'
    environment:
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=LISTENER_FROM_HOST://:9093,LISTENER_FROM_CONTAINER://kafka-repl:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=LISTENER_FROM_HOST://localhost:9093,LISTENER_FROM_CONTAINER://kafka-repl:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_FROM_HOST:PLAINTEXT,LISTENER_FROM_CONTAINER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LISTENER_FROM_CONTAINER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_CFG_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_CFG_NUM_PARTITIONS=1
    networks:
      - testeVivoNetwork
    depends_on:
      - zookeeper

  connect:
    image: quay.io/debezium/connect:2.7
    restart: always
    environment:
      CONFIG_STORAGE_TOPIC: 'my_connect_configs'
      OFFSET_STORAGE_TOPIC: 'my_connect_offsets'
      STATUS_STORAGE_TOPIC: 'my_connect_statuses'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2
      BOOTSTRAP_SERVERS: "kafka:9094"
    ports:
      - '8083:8083'
    expose:
      - '8083'
    depends_on:
      - kafka
    networks:
      - testeVivoNetwork

  metascale-api:
    image: 'gkazukionishi/metascale'
    ports:
      - '8080:8080'
    environment:
      - INSTANCE_TYPE=API
      - DEV_MODE=true
    networks:
      - testeVivoNetwork

  metascale-kafka-1:
    image: 'gkazukionishi/metascale'
    environment:
      - INSTANCE_TYPE=KAFKA
      - KAFKA_BROKERS=kafka:9094
      - DEV_MODE=true
    networks:
      - testeVivoNetwork

  metascale-kafka-2:
    image: 'gkazukionishi/metascale'
    environment:
      - INSTANCE_TYPE=KAFKA
      - KAFKA_BROKERS=kafka:9094
      - DEV_MODE=true
    networks:
      - testeVivoNetwork
